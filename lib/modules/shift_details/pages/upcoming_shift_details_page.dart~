import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:orion_safeguard/config/constants/app_colors.dart';
import 'package:orion_safeguard/config/constants/app_text_styles.dart';
import 'package:orion_safeguard/modules/dashboard/widgets/home_screen_widgets/upcoming_shifts_section/check_out_button.dart';
import 'package:orion_safeguard/modules/screen_layout_widget/screen_layout.dart';
import 'package:orion_safeguard/modules/shift_details/cubits/shift_detail_cubits/shift_details_cubit.dart';
import 'package:orion_safeguard/utils/extensions/extended_string.dart';
import 'package:orion_safeguard/utils/helper_widgets.dart';
import 'package:sizer/sizer.dart';

import '../../../utils/display/display_utils.dart';
import '../../../utils/enums.dart';
import '../../../utils/heights_and_widths.dart';
import '../../../utils/time_utils.dart';
import '../../dashboard/model/shifts_model/shifts_model.dart';
import '../../dashboard/widgets/home_screen_widgets/upcoming_shifts_section/approve_decline_button.dart';
import '../../dashboard/widgets/home_screen_widgets/upcoming_shifts_section/check_in_button.dart';

class UpcomingShiftDetailsPage extends StatelessWidget {
  final ShiftModel? shiftModel;
  const UpcomingShiftDetailsPage({super.key, required this.shiftModel});

  @override
  Widget build(BuildContext context) {
    ShiftDetailCubit shiftDetailCubit = ShiftDetailCubit(shift: shiftModel);
    return OrionLayout(
        pageTitle: "Shift Details",
        child: SingleChildScrollView(
          child: BlocProvider<ShiftDetailCubit>(
            create: (BuildContext context) => shiftDetailCubit,
            child: BlocConsumer<ShiftDetailCubit, ShiftDetailState>(
              listener: (BuildContext context, ShiftDetailState state) {
                if (state.postApiStatus == PostApiStatus.error) {
                  DisplayUtils.showErrorToast(context, state.errorMessage);
                } else if (state.postApiStatus == PostApiStatus.success) {
                  DisplayUtils.showSuccessToast(context, "Shift Rejection Confirmed");
                }
              },
              buildWhen: (previous, next) => previous != next,
              builder: (context, state) {
                return Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                state.shift?.shiftName ?? '',
                                style: AppTextStyles.robotoBold(
                                  fontSize: 18.0,
                                ),
                              ),
                              Text(
                                state.shift?.location ?? '',
                                style: AppTextStyles.robotoRegular(
                                  fontSize: 14.0,
                                  color: AppColors.primaryColor,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                          Text(
                            shiftStatus(state.shift?.shiftStatus ?? ''),
                            style: AppTextStyles.robotoBold(
                              color: const Color(0xff575757),
                              fontSize: 14.0,
                            ),
                          )
                        ],
                      ),
                      h1,
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          CustomShiftBox(
                            fieldName: 'Date',
                            fieldSubName:
                                formatDateTime(state.shift?.createdAt),
                          ),
                          customVerticalDivider(
                            height: 30.sp,
                            thickness: 4.sp,
                            color: Colors.grey.shade600,
                          ),
                          CustomShiftBox(
                            fieldName: 'Shift type',
                            fieldSubName:
                                state.shift?.shiftType?.toCapitalize() ?? '',
                          ),
                        ],
                      ),
                      h1,
                      customDivider(),
                      h1,
                      Text(
                        "Shift Description",
                        style: AppTextStyles.robotoSemiBold(
                          fontSize: 14.0,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        state.shift?.description ?? '',
                        style: AppTextStyles.robotoRegular(
                          fontSize: 12.0,
                          color: AppColors.textGrey,
                          fontWeight: FontWeight.normal,
                        ),
                      ),
                      customDivider(),
                      h1,
                      Text(
                        "Schedule",
                        style: AppTextStyles.robotoSemiBold(
                          fontSize: 14.0,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "Start Date",
                                  style: AppTextStyles.robotoBold(
                                    fontSize: 13.0,
                                  ),
                                ),
                                Text(
                                  formatDateTime(state.shift?.startDate,
                                      showYear: true),
                                  style: AppTextStyles.robotoRegular(
                                    fontSize: 14.0,
                                  ),
                                )
                              ],
                            ),
                            customDivider(),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "End Date",
                                  style: AppTextStyles.robotoBold(
                                    fontSize: 13.0,
                                  ),
                                ),
                                Text(
                                  formatDateTime(shiftModel?.endDate,
                                      showYear: true),
                                  style: AppTextStyles.robotoRegular(
                                    fontSize: 14.0,
                                  ),
                                )
                              ],
                            ),
                            customDivider(),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "Total Duration",
                                  style: AppTextStyles.robotoBold(
                                    fontSize: 13.0,
                                  ),
                                ),
                                Text(
                                  textAlign: TextAlign.left,
                                  timeDifference(state.shift?.startDate,
                                      state.shift?.endDate),
                                  style: AppTextStyles.robotoRegular(
                                    fontSize: 14.0,
                                  ),
                                )
                              ],
                            ),
                          ],
                        ),
                      ),
                      customDivider(),
                      h1,
                      if (state.shift?.shiftStatus ==
                          ShiftModel.keyShiftStatusApproved)
                        CheckInButton(
                          shiftsModel: shiftModel,
                        ),
                      if (state.shift?.shiftStatus ==
                          ShiftModel.keyShiftStatusOngoing)
                        CheckOutButton(
                          shiftsModel: shiftModel,
                        ),
                      if (state.shift?.shiftStatus ==
                          ShiftModel.keyShiftStatusUpcoming)
                        ApproveDeclineButton(shiftModel: shiftModel)
                    ],
                  ),
                );
              },
            ),
          ),
        ));
  }
}

class CustomShiftBox extends StatelessWidget {
  const CustomShiftBox(
      {super.key, required this.fieldName, required this.fieldSubName});

  final String fieldName;
  final String fieldSubName;

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 40.sp,
      width: 50.sp,
      decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20.0),
          // color: Colors.red.shade100,
          color: AppColors.primaryColor.withOpacity(0.3)),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            fieldName,
            style: AppTextStyles.robotoBold(
              fontSize: 14.0,
            ),
          ),
          Text(
            fieldSubName,
            style: AppTextStyles.robotoRegular(
              fontSize: 12.0,
            ),
          ),
        ],
      ),
    );
  }
}
