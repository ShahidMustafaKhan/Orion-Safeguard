import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:orion_safeguard/modules/dashboard/cubits/home_cubits/home_cubit.dart';
import 'package:orion_safeguard/modules/screen_layout_widget/screen_layout.dart';
import 'package:orion_safeguard/utils/display/display_utils.dart';

import '../../../utils/enums.dart';
import '../../../utils/heights_and_widths.dart';
import '../../dashboard/model/shifts_model/shifts_model.dart';
import '../cubits/check_in_out_cubits/check_in_out_cubit.dart';
import '../widgets/check_in_out_widgets/check_in_out_button.dart';
import '../widgets/check_in_out_widgets/selfie_widget.dart';
import '../widgets/check_in_out_widgets/shift_time_box.dart';

class CheckInOutPage extends StatelessWidget {
  final ShiftModel? shiftsModel;
  const CheckInOutPage({super.key, required this.shiftsModel});

  @override
  Widget build(BuildContext context) {
    CheckInOutCubit checkInOutCubit = CheckInOutCubit(shift: shiftsModel);
    context.read<HomeCubit>().ongoingShift();
    return BlocProvider<CheckInOutCubit>(
      create: (BuildContext context) => checkInOutCubit,
      child: BlocConsumer<CheckInOutCubit, CheckInOutState>(
          listenWhen: (previous, next) =>
              previous.errorMessage != next.errorMessage ||
              previous.approvalPostStatus != next.approvalPostStatus ||
              previous.postApiStatus != next.postApiStatus,
          listener: (context, state) {
            if (state.postApiStatus == PostApiStatus.error ||
                state.approvalPostStatus == PostApiStatus.error) {
              DisplayUtils.showErrorToast(
                context,
                state.errorMessage ?? 'Something went wrong',
              );
              context.read<CheckInOutCubit>().resetPostStatus();
              return; // Prevent further execution
            }
            if (state.postApiStatus == PostApiStatus.success) {
              DisplayUtils.showSuccessToast(
                context,
                "You have successfully checked out from your shift",
              );
              context.read<CheckInOutCubit>().cancelTimer();
              context.read<CheckInOutCubit>().resetApprovalPostStatus();
              return;
            }

            if (state.approvalPostStatus == PostApiStatus.success) {
              DisplayUtils.showSuccessToast(
                context,
                "The approval request has been sent successfully",
              );
              context.read<CheckInOutCubit>().resetApprovalPostStatus();
            }
          },
          buildWhen: (previous, next) =>
              previous.now != next.now || previous.now == next.now,
          builder: (context, state) {
            return OrionLayout(
                pageTitle: state.shift?.shiftStatus ==
                        ShiftModel.keyShiftStatusCompleted
                    ? "Shift Completed"
                    : state.shift?.shiftStatus ==
                            ShiftModel.keyShiftStatusOngoing
                        ? "Check Out"
                        : "Check In",
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      Expanded(
                        flex: 2,
                        child: ShiftTimeBox(
                          shiftsModel: shiftsModel,
                        ),
                      ),
                      h1,
                      Expanded(
                          flex: 6,
                          child: SelfieWidget(
                            file: state.file,
                          )),
                      CheckInOutButton(
                        shift: state.shift,
                      )
                    ],
                  ),
                ));
          }),
    );
  }
}
