import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:orion_safeguard/modules/notification/cubits/notification_cubit.dart';
import '../../../config/constants/app_colors.dart';
import '../../../generated/assets.dart';
import '../../../utils/display/display_utils.dart';
import '../../../utils/enums.dart';
import '../../../utils/heights_and_widths.dart';
import '../../../utils/helper_widgets.dart';
import '../../screen_layout_widget/custom_see_all_row.dart';
import '../../screen_layout_widget/screen_layout.dart';
import '../model/notification_model.dart';
import '../widgets/custom_notification_widget.dart';

class NotificationScreen extends StatelessWidget {
  const NotificationScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return OrionLayout(
      pageTitle: 'Notifications',
      child: Padding(
        padding: const EdgeInsets.symmetric(
          horizontal: 16.0,
        ),
        child: BlocProvider<NotificationCubit>(
          create: (BuildContext context) =>
              NotificationCubit()..fetchNotifications(),
          child: BlocConsumer<NotificationCubit, NotificationState>(
            listenWhen: (previous, next) => previous.notifications.status != next.notifications.status || previous.notifications.message != next.notifications.message,
              listener: (context, state) {
                if (state.notifications.status == Status.error) {
                  DisplayUtils.showErrorToast(context, state.notifications.message);
                }
              },
              buildWhen: (previous, next) => previous != next,
              builder: (context, state) {
                List<NotificationModel> notifications =
                    state.notifications.data ?? [];
                return Column(
                  children: [
                    h1,
                    CustomSeeAllRowWidget(
                      text: 'Today'.toUpperCase(),
                      secondText: 'Mark all as read',
                      textColor: AppColors.greyColor,
                      fun: () {
                        context
                            .read<NotificationCubit>()
                            .markNotificationsRead();
                      },
                    ),
                    h1,
                    Expanded(
                      child: ListView.separated(
                        padding: EdgeInsets.zero,
                        itemCount: notifications.length,
                        itemBuilder: (context, index) {
                          return AnnouncementCard(
                            isUnRead: notifications[index].status ==
                                NotificationModel.keyStatusUnread,
                            title: notifications[index].title ?? '',
                            time: timeAgo(notifications[index].createdAt),
                            content: notifications[index].description ?? '',
                            iconPath:
                                returnIcon(notifications[index].type ?? '')!,
                          );
                        },
                        separatorBuilder: (BuildContext context, int index) {
                          return customDivider(
                            hPadding: 0.0,
                            thickness: 1.2,
                            color: Colors.grey.shade300,
                          );
                        },
                      ),
                    ),
                  ],
                );
              }),
        ),
      ),
    );
  }
}

String timeAgo(DateTime? dateTime) {
  if (dateTime == null) return '';
  final Duration difference = DateTime.now().difference(dateTime);

  if (difference.inSeconds < 60) {
    return '${difference.inSeconds} sec';
  } else if (difference.inMinutes < 60) {
    return '${difference.inMinutes} min';
  } else if (difference.inHours < 24) {
    return '${difference.inHours} hours';
  } else if (difference.inDays < 7) {
    return '${difference.inDays} days';
  } else if (difference.inDays < 30) {
    return '${(difference.inDays / 7).floor()} weeks';
  } else if (difference.inDays < 365) {
    return '${(difference.inDays / 30).floor()} months';
  } else {
    return '${(difference.inDays / 365).floor()} years';
  }
}

String? returnIcon(String type) {
  if (type == NotificationModel.keyTypeUpComingShift) {
    return Assets.svgCalendarTick;
  } else if (type == NotificationModel.keyTypeShiftChange) {
    return Assets.svgRepeat;
  } else if (type == NotificationModel.keyTypeAnnouncement) {
    return Assets.svgUserAdd;
  }
  return null;
}
